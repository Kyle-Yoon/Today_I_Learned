'''
프로그래머스 - 가장 가까운 같은 글자


# 문제 설명
문자열 s가 주어졌을 때, s의 각 위치마다 자신보다 앞에 나왔으면서, 자신과 가장 가까운 곳에 있는 같은 글자가 어디 있는지 알고 싶습니다.
예를 들어, s="banana"라고 할 때,  각 글자들을 왼쪽부터 오른쪽으로 읽어 나가면서 다음과 같이 진행할 수 있습니다.

b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 자신보다 두 칸 앞에 a가 있습니다. 이는 2로 표현합니다.
n도 자신보다 두 칸 앞에 n이 있습니다. 이는 2로 표현합니다.
a는 자신보다 두 칸, 네 칸 앞에 a가 있습니다. 이 중 가까운 것은 두 칸 앞이고, 이는 2로 표현합니다.
따라서 최종 결과물은 [-1, -1, -1, 2, 2, 2]가 됩니다.

문자열 s이 주어질 때, 위와 같이 정의된 연산을 수행하는 함수 solution을 완성해주세요.


# 제한사항
1 ≤ s의 길이 ≤ 10,000
s는 영어 소문자로만 이루어져 있습니다.


# 입출력 예
s           result
"banana"	[-1, -1, -1, 2, 2, 2]
"foobar"	[-1, -1, 1, -1, -1, -1]
'''


# 문제 풀이1
def solution(s):    # O(n**2)
    answer = []
    for idx in range(len(s)):   # 문자열 각 문자의 인덱스 순회
        tmp= s[:idx][::-1]    # 첫 문자부터 시작해서 순회 중인 특정 문자열의 인덱스 바로 앞까지 슬라이싱 & 그 문자열을 거꾸로 저장
        num = 1   # 몇 번째 앞에 있는지 세는 변수
        if not tmp or s[idx] not in tmp:    # tmp가 빈 문자열이거나, tmp에 순회 중인 문자열이 없으면 answer 리스트 요소에 -1 추가하고 다음 문자 순회
            answer.append(-1)
            continue
        for x in tmp:    # tmp에 순회 중인 특정 문자열이 있을 경우 몇 번째 앞에 있는지 num 변수에 담아 answer 리스트 요소로 추가
            if x == s[idx]:
                answer.append(num)
                break
            else:
                num += 1
    return answer



# 문제 풀이2    # O(n)
def solution(s):
    # 결과를 저장할 리스트 초기화
    answer = []
    # 각 문자가 마지막에 나타난 위치를 저장할 사전 초기화
    last_seen = {}
    
    for i, char in enumerate(s):
        # 문자가 이전에 나타난 적이 있다면, 현재 위치에서 마지막으로 나타난 위치를 뺀 값을 결과에 추가
        if char in last_seen:
            result.append(i - last_seen[char])
        else:
            # 문자가 처음 나타난 경우, 결과에 -1 추가
            result.append(-1)
        # 현재 문자의 위치를 업데이트
        last_seen[char] = i
    
    return answer
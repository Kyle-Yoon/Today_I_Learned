import time
start_time = time.perf_counter()

n = 210000    # 2부터 n까지의 소수를 찾기
primes = set(range(2, n+1)) # set() 자료들을 집합으로 묶는 함수다.
                         # n=10이면 {2, 3, 4, ..., 8, 9, 10} 집합이 생성된다.
                         # 집합으로 묶는 이유는 교집합, 합집합, 차집합을 이용하기 위해서다.
                         
for i in range(2, n+1): # 1은 소수가 아니니 2부터 시작
    if i in primes: # 생성한 집합 primes에 i가 들어가 있으면, i를 제외한 i의 배수를 primes 집합에서 전부 소거
        primes -= set(range(2*i, n+1, i)) # 만약 i가 2라면, range(2*2, 50+1, 2) -> {4, 6, 8, 10, 12, 14, ..., 48, 50}이 된다.
                                      # 원소의 규칙을 보면 2를 제외한 2의 배수가 모두 들어가 있는 셈이다.
                                      # 차집합 연산을 이용한다. {1, 2, 3} {1} >>> {2, 3}
                                      # primes에서 {4, 6, 8, 10, 12, 14, ..., 48, 50}를 차집합하면 2의 배수가 모두 삭제된다.
                                      # i가 증가해 3이면 결과적으로 3을 제외한 3의 배수가 primes집합에서 삭제되게 된다.
                                      # i가 4, 5, 6, ... 이 되면 각각의 배수들이 삭제된다.

end_time = time.perf_counter()
print(end_time - start_time, '\b초')